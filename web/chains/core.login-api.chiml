ins: state
out: response
do:
  # get jwtTokenName, user, and password
  - parallel:
      - |config <-- state.config
      - |request <-- state.request
      - |identity <-- ''
      - |password <-- ''
  - parallel:
      - if: (request.query.user && request.query.password)
        parallel:
          - |identity <-- request.query.user
          - |password <-- request.query.password
      - if: (request.body.user && request.body.password)
        parallel:
          - |identity <-- request.body.user
          - |password <-- request.body.password

  # get users from database
  - |userFilter <-- {$or: [{username:identity}, {email:identity}]}
  - |('web_users', 'find', userFilter) -> [$.helper.mongoExecute] -> users

  # validate
  - if: users.length > 0
    do:
      - user <-- users[0]
      - salt <-- user.salt
      - |(password, salt) -> {$.helper.hashPassword} -> hashedObject
      - if: hashedObject.hashedPassword == user.hashedPassword
        do:
          - |(user) -> {$.helper.getLoggedInAuth} -> auth
          - ins:
              - auth
              - config.jwtSecret
              - expiresIn: config.jwtExpired
            out: jwtToken
            do: |{$.loadJs('jsonwebtoken', 'sign')}
          - |({token: jwtToken, status: 200, userMessage: 'Login success', developerMessage: 'Login success'}) --> response.data
          - |(jwtToken) --> response.cookies[config.jwtTokenName]
        else: |({token: '', status: 400, userMessage: 'Invalid username or password', 'developerMessage': 'Invalid username or password'}) --> response.data
    else: |({token: '', status: 400, userMessage: 'Invalid username or password', 'developerMessage': 'Invalid username or password'}) --> response.data
