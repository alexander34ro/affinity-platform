{
	"info": {
		"name": "test-web",
		"_postman_id": "419726f7-7afc-2b4f-2e4d-b9412e77548b",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "GET: Index - not login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "394266dd-e1fc-41a1-83c3-2c8304ddd06e",
								"type": "text/javascript",
								"exec": [
									"tests['response contains Hello world :D'] = _.include(responseBody, 'Hello world :D');"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4df93261-3e18-4506-8d47-9a50d223614b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck API users - not login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a08286e-79a8-4b02-8f3f-05ce9772f824",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['should be forbidden'] = responseJSON.status === 403;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4df93261-3e18-4506-8d47-9a50d223614b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:3000/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Login API - correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb38be69-4b2a-4132-8ff0-87256968c895",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `userMessage`'] = _.has(responseJSON, 'userMessage');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 200'] = responseJSON.status == 200;",
									"",
									"tests['same token should be available in cookies'] = postman.getResponseCookie('token').value == responseJSON.token;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/login-api?user=admin&password=admin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login-api"
							],
							"query": [
								{
									"key": "user",
									"value": "admin",
									"equals": true
								},
								{
									"key": "password",
									"value": "admin",
									"equals": true
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck API users - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43c46d61-7ffa-46e5-8a3f-5ea3ffac94b5",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['should be ok'] = responseJSON.status === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4df93261-3e18-4506-8d47-9a50d223614b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:3000/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Index - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ea96c9a-74a7-4ce0-b722-43d628591c44",
								"type": "text/javascript",
								"exec": [
									"tests['response contains Hello world :D'] = _.include(responseBody, 'Hello admin');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Login API - incorrect user, correct password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b9eb54d-877b-4001-b70d-860d1911fda4",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `userMessage`'] = _.has(responseJSON, 'userMessage');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 400'] = responseJSON.status == 400;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/login-api?user=root&password=admin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login-api"
							],
							"query": [
								{
									"key": "user",
									"value": "root",
									"equals": true
								},
								{
									"key": "password",
									"value": "admin",
									"equals": true
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Login API - correct user, incorrect password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab43b96f-4bf7-4f29-a7fa-6a63449a948e",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `userMessage`'] = _.has(responseJSON, 'userMessage');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 400'] = responseJSON.status == 400;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/login-api?user=admin&password=root",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login-api"
							],
							"query": [
								{
									"key": "user",
									"value": "admin",
									"equals": true
								},
								{
									"key": "password",
									"value": "root",
									"equals": true
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Logout API",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ba0b532-2362-476d-a6b7-c8f5635986c0",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 200'] = responseJSON.status == 200;",
									"",
									"tests['same token should be available in cookies'] = postman.getResponseCookie('token').value == responseJSON.token;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/logout-api",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"logout-api"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Index - not login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "394266dd-e1fc-41a1-83c3-2c8304ddd06e",
								"type": "text/javascript",
								"exec": [
									"tests['response contains Hello world :D'] = _.include(responseBody, 'Hello world :D');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "POST: Login API - correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58fe57e9-01f3-40e5-87b0-319429688c01",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `userMessage`'] = _.has(responseJSON, 'userMessage');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 200'] = responseJSON.status == 200;",
									"",
									"tests['same token should be available in cookies'] = postman.getResponseCookie('token').value == responseJSON.token;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/login-api",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login-api"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Index - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ea96c9a-74a7-4ce0-b722-43d628591c44",
								"type": "text/javascript",
								"exec": [
									"tests['response contains Hello world :D'] = _.include(responseBody, 'Hello admin');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Logout API",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9229f4c9-18fb-4284-83f8-7258e9b4ab03",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 200'] = responseJSON.status == 200;",
									"",
									"tests['same token should be available in cookies'] = postman.getResponseCookie('token').value == responseJSON.token;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/logout-api",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"logout-api"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Index - not login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "394266dd-e1fc-41a1-83c3-2c8304ddd06e",
								"type": "text/javascript",
								"exec": [
									"tests['response contains Hello world :D'] = _.include(responseBody, 'Hello world :D');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						},
						"description": "Login API"
					},
					"response": []
				}
			]
		},
		{
			"name": "CCK API: POST",
			"item": [
				{
					"name": "POST: cck tests - insert testKey1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d9c52fa-520f-4810-ba12-94066f5ebb66",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"result = responseJSON.result;",
									"",
									"tests['inserted key correct'] = result.key == 'testKey1';",
									"tests['inserted value correct'] = result.value == 'testValue1';",
									"postman.setEnvironmentVariable('firstTestId', result._id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "key",
									"value": "testKey1",
									"type": "text"
								},
								{
									"key": "value",
									"value": "testValue1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST: cck tests - insert-bulk testKey2 & testKey3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bc69347-9ce8-40af-aad8-407dbdb3d18d",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"results = responseJSON.results;",
									"tests['results should contains two documents'] = results.length == 2;",
									"tests['first result should be testKey2'] = results[0].key == 'testKey2';",
									"tests['second result should be testKey3'] = results[1].key == 'testKey3';"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json;charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"key\":\"testKey2\",\"value\":\"testValue2\"}, {\"key\":\"testKey3\",\"value\":\"testValue3\"}]"
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET: cck tests - all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bb7dd75-5877-447d-8fa6-ddfd08ae4997",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results, firstResult;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"firstResult = results[0];",
									"tests['results contains 3 rows'] = results.length === 3;",
									"tests['firstResult has id'] = ('_id' in firstResult);",
									"tests['firstResult does not have history'] = !('_history' in firstResult);",
									"",
									"postman.setEnvironmentVariable('firstTestId', firstResult._id);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						},
						"description": "Login API"
					},
					"response": []
				}
			]
		},
		{
			"name": "CCK API: GET",
			"item": [
				{
					"name": "GET: cck tests - all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6c7aa09-5302-48b1-ba6c-103a927ab250",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results, firstResult;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"firstResult = results[0];",
									"tests['results contains 3 rows'] = results.length === 3;",
									"tests['firstResult has id'] = ('_id' in firstResult);",
									"tests['firstResult does not have history'] = !('_history' in firstResult);",
									"",
									"postman.setEnvironmentVariable('firstTestId', firstResult._id);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck tests - limit showHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c972d46-71bb-4040-9414-c71cffb7c9e0",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results, firstResult;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"firstResult = results[0];",
									"tests['results contains 3 fields'] = results.length === 2;",
									"tests['firstResult has id'] = ('_id' in firstResult);",
									"tests['firstResult has history'] = ('_history' in firstResult);",
									"tests['firstResult history is correct'] = firstResult._history[0].set.key = firstResult.key;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests?limit=2&_showHistory=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"equals": true
								},
								{
									"key": "_showHistory",
									"value": "1",
									"equals": true
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck tests - by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1381d2fe-2eb3-404c-976c-3c2348ec7244",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `result`'] = _.has(responseJSON, 'result');",
									"result = responseJSON.result;",
									"tests['result has id'] = ('_id' in result);",
									"tests['result id is valid'] = result._id == postman.getEnvironmentVariable('firstTestId');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests/{{firstTestId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests",
								"{{firstTestId}}"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck tests - by id (incorrect)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5981942-19b1-4313-ab39-57a2249764a2",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"tests['response contains `result`'] = _.has(responseJSON, 'result');",
									"result = responseJSON.result;",
									"",
									"tests['response status is 400'] = responseJSON.status == 400;",
									"tests['result has no id'] = !('_id' in result);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests/123",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests",
								"123"
							]
						},
						"description": "Login API"
					},
					"response": []
				}
			]
		},
		{
			"name": "CCK API: UPDATE",
			"item": [
				{
					"name": "POST: cck tests - update all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26e135cc-ab8b-4fa3-9584-dbbf9b68e2ea",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"result = responseJSON.result;",
									"tests['result.nModified should be 3'] = result.nModified == 3;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "value",
									"value": "foo",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST: cck tests - update one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cabf6317-8854-4a25-ab70-e623d3f9728a",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"result = responseJSON.result;",
									"tests['result.nModified should be 1'] = result.nModified == 1;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "value",
									"value": "bar",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests/{{firstTestId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests",
								"{{firstTestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET: cck tests - all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cc54a34-a38f-4cc8-a2f7-78e7817c2916",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results, fooCount, barCount;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"",
									"fooCount = 0;",
									"barCount = 0;",
									"for (let result of results) {",
									"    if (result.value == 'foo') {",
									"        fooCount ++;",
									"    } else if (result.value == 'bar') {",
									"        barCount ++;",
									"    }",
									"}",
									"",
									"tests['fooCount is 2'] = fooCount == 2;",
									"tests['barCount is 1'] = barCount == 1;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						},
						"description": "Login API"
					},
					"response": []
				}
			]
		},
		{
			"name": "CCK API: DELETE",
			"item": [
				{
					"name": "POST: cck tests - delete one (soft)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cabf6317-8854-4a25-ab70-e623d3f9728a",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"result = responseJSON.result;",
									"tests['result.nModified should be 1'] = result.nModified == 1;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests/{{firstTestId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests",
								"{{firstTestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST: cck tests - delete all (soft)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fa52e37-c3d3-4741-9199-c2501eb3480e",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"result = responseJSON.result;",
									"tests['result.nModified should be 2'] = result.nModified == 2;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET: cck tests - all (excludeDeleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c29b44bf-df87-434e-8cdb-43805092e38b",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"",
									"tests['results should be empty'] = results.length === 0;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck tests - all (includeDeleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27d3b48c-2a03-4c6d-b901-2d79338fa72b",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"",
									"tests['results should be empty'] = results.length === 3;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests?_excludeDeleted=0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "_excludeDeleted",
									"value": "0",
									"equals": true
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "POST: cck tests - delete all (hard)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b76c0127-0abc-40fc-98fd-1a72dbf72013",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"result = responseJSON.result;",
									"tests['result.n should be 3'] = result.n == 3;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests?_excludeDeleted=0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "_excludeDeleted",
									"value": "0",
									"equals": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET: cck tests - all (includeDeleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7e5de0d-2377-44dc-be2a-8503307e180a",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"",
									"tests['results should be empty'] = results.length === 0;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests?_excludeDeleted=0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "_excludeDeleted",
									"value": "0",
									"equals": true
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				}
			]
		}
	]
}